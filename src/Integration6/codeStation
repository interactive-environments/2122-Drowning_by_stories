#include "Adafruit_VL53L0X.h"
#include "FastLED.h"

#define NUM_LEDS 8
#define DATA_PIN 3

// Define the array of leds
CRGB leds[NUM_LEDS];

Adafruit_VL53L0X lox = Adafruit_VL53L0X();

boolean bla = false;

void setup() {
  Serial.begin(115200);

  FastLED.addLeds<NEOPIXEL, DATA_PIN>(leds, NUM_LEDS);

  // wait until serial port opens for native USB devices
  while (! Serial) {
    delay(1);
  }

  Serial.println("Adafruit VL53L0X test");
  if (!lox.begin()) {
    Serial.println(F("Failed to boot VL53L0X"));
    while (1);
  }
  // power
  Serial.println(F("VL53L0X API Simple Ranging example\n\n"));
}

// Function to fade up the led lights
void fadeUp() {
  for ( int j = 0; j <= 255; j++) {
      for ( int i = 0; i < NUM_LEDS; i++ ) {
        leds[i] = CRGB::White;
        leds[i].maximizeBrightness(j);
      }
      FastLED.show();
    }
}

// Function to fade down the led lights 
void fadeDown() {
  for ( int j = 255; j >= 0; j--) {
      for ( int i = 0; i < NUM_LEDS; i++ ) {
        leds[i] = CRGB::White;
        leds[i].maximizeBrightness(j);
      }
      FastLED.show();
    }
}

// Function to turn on the led lights
void on() {
  for (int i = 0; i < NUM_LEDS; i++) {
      leds[i] = CRGB::White;
      leds[i].maximizeBrightness(255);
    }
    FastLED.show();
}

// Function to turn off the led lights 
void off() {
  for (int i = 0; i < NUM_LEDS; i++) {
      leds[i] = CRGB::Black;
    }
    FastLED.show();
}


void loop() {
  VL53L0X_RangingMeasurementData_t measure;

  Serial.print("Reading a measurement... ");
  lox.rangingTest(&measure, false); // pass in 'true' to get debug data printout!

  if (measure.RangeStatus != 4) {  // phase failures have incorrect data
    Serial.print("Distance (mm): "); Serial.println(measure.RangeMilliMeter);
  } else {
    Serial.println(" out of range ");
  }

  if (measure.RangeMilliMeter < 2000 && !bla) {
    fadeUp();
    on();
    bla = true;
  } else if(measure.RangeMilliMeter > 2000 && bla) {
    fadeDown();
    off();
    bla = false;
  } 
  delay(100);
}
